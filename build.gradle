/* (c) Michal Nov√°k, libeetlite, it.novakmi@gmail.com, see LICENSE file */

apply plugin: 'groovy'
apply plugin: 'maven' // to use maven repository
apply plugin: 'idea' // to generate project+module files for Intellij Idea

def groupId = 'com.github.novakmi'
version '0.4.0'
sourceCompatibility = '1.6'
def installDir = file('./install')

repositories {
    maven { url "https://jcenter.bintray.com" } //jcenter repo
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.9'
    testCompile group: 'org.testng', name: 'testng', version: '6.9.9'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.1'
    testCompile group: 'janino', name: 'janino', version: '2.4.3'
    testCompile group: 'com.github.groovy-wslite', name: 'groovy-wslite', version: '1.1.3'
}


jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Specification-Vendor': 'Michal Novak (it.novakmi@gmail.com)',
                'Built-By': 'it.novakmi',
                'Specification-Title': project.name,
                'Extension-Name': project.name,
                'Specification-Version': version
        )
    }
}

clean << {  //add to clean task
    installDir.deleteDir()
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from "${project.projectDir}/src/main"
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'groovydoc'
    from groovydoc.destinationDir
}


test {
    systemProperties["testDataDir"] = "${projectDir}/src/test/testData"
    useTestNG() {
        suiteXmlBuilder().suite(name: 'Test libeetlite') {
            test(name: 'libeetlite'/*, annotations: 'JDK', verbose: '1'*/) {
                groups {
                    run {
                        include(name: "basic")
                        exclude(name: "internet")
                    }
                }
                classes([:]) {
                    'class'(name: "com.github.novakmi.libeetlite.test.EetliteUtilTest")
                    'class'(name: "com.github.novakmi.libeetlite.test.EetliteXmlTest")
                }
            }
        }
    }
    //options {
    //        listeners << 'org.uncommons.reportng.HTMLReporter'
    //        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    //    }
}

task prepareInstall(type: Copy, dependsOn: [jar, sourcesJar, groovydocJar]) {
    installDir.mkdirs()
    //logger.quiet("externalJars {}", externalJars)
    from configurations['compile']?.files/*?.findAll { it.absolutePath.indexOf('unspecified') < 0 }*/
    from "${project.projectDir}/build/libs"
    into installDir
}

// zip into build/distributions
task zipInstall(type: Zip, dependsOn: prepareInstall) {
    from installDir.toString()
}

artifacts { // upload also sources and groovydoc
    archives sourcesJar
    archives groovydocJar
}

uploadArchives {  // support to upload to github emulated maven repository
    def localMavenDir = System.getenv()['LOCAL_MAVEN_DIR']
    if (!localMavenDir) {
        logger.error("LOCAL_MAVEN_DIR is not defined! Artifacts will not be exported!")
    } else {
        repositories {
            mavenDeployer {
                repository(url: "file://localhost/${localMavenDir}/releases")
                pom.version = version
                pom.groupId = groupId
            }
        }
    }
}


// http://daniel.gredler.net/2011/08/08/gradle-keeping-libraries-up-to-date/
// Find any 3rd party libraries which have released new versions
// to the central Maven repository since we last upgraded.
task checkLibVersions << {
    def checked = [:]
    allprojects {
        configurations.each { configuration ->
            configuration.allDependencies.each { dependency ->
                def ver = dependency.version
                if (ver && !ver.contains('SNAPSHOT') && !checked[dependency]) {
                    def group = dependency.group
                    def path = group.replace('.', '/')
                    def name = dependency.name
                    def url = "http://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"
                    try {
                        def metadata = new XmlSlurper().parseText(url.toURL().text)
                        def versions = metadata.versioning.versions.version.collect { it.text() }
                        versions.removeAll { it.toLowerCase().contains('alpha') }
                        versions.removeAll { it.toLowerCase().contains('beta') }
                        versions.removeAll { it.toLowerCase().contains('rc') }
                        def newest = versions.max()
                        if (ver != newest) {
                            println "$group:$name $ver -> $newest [$versions]"
                        }
                    } catch (FileNotFoundException e) {
                        logger.debug "Unable to download $url: $e.message"
                    } catch (org.xml.sax.SAXParseException e) {
                        logger.debug "Unable to parse $url: $e.message"
                    }
                    checked[dependency] = true
                }
            }
        }
    }
}
