/* (c) Michal Nov√°k, libeetlite, it.novakmi@gmail.com, see LICENSE file */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.27.0'
    }
}

plugins {
    id 'base'
    id 'groovy'
//    id 'java-gradle-plugin'
    id 'idea'
    id 'com.github.ben-manes.versions' version '0.27.0' // gradle dependencyUpdates -Drevision=release
    id 'maven-publish' // to use maven repository
}

group = 'com.github.novakmi'
version '0.5.1'
sourceCompatibility = '1.6'
def installDir = file('./install')

repositories {
    jcenter()
}

dependencies {
    implementation localGroovy()
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    testImplementation group: 'org.testng', name: 'testng', version: '7.1.1'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    testImplementation group: 'org.codehaus.janino', name: 'janino', version: '3.1.0'
    testImplementation group: 'com.github.groovy-wslite', name: 'groovy-wslite', version: '1.1.3'
}


jar {
    archiveBaseName = project.name
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Specification-Vendor': 'Michal Novak (it.novakmi@gmail.com)',
            'Built-By': 'it.novakmi',
            'Specification-Title': project.name,
            'Extension-Name': project.name,
            'Specification-Version': project.version
        )
    }
}

clean.doLast {  //add to clean task
    installDir.deleteDir()
}

task sourcesJar(type: Jar) {
    archiveBaseName = project.name
    archiveClassifier = 'sources'
    from "${project.projectDir}/src/main"
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    archiveBaseName = project.name
    archiveClassifier = 'groovydoc'
    from groovydoc.destinationDir
}


test {
    systemProperties["testDataDir"] = "${projectDir}/src/test/testData"
    useTestNG() {
        suiteXmlBuilder().suite(name: 'Test libeetlite') {
            test(name: 'libeetlite'/*, annotations: 'JDK', verbose: '1'*/) {
                groups {
                    run {
                        include(name: "basic")
                        exclude(name: "internet")
                    }
                }
                classes([:]) {
                    'class'(name: "com.github.novakmi.libeetlite.test.EetliteUtilTest")
                    'class'(name: "com.github.novakmi.libeetlite.test.EetliteXmlTest")
                }
            }
        }
    }
    //options {
    //        listeners << 'org.uncommons.reportng.HTMLReporter'
    //        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    //    }
}

task prepareInstall(type: Copy, dependsOn: [jar, sourcesJar, groovydocJar]) {
    installDir.mkdirs()
    //logger.quiet("externalJars {}", externalJars)
    from configurations['compile']?.files/*?.findAll { it.absolutePath.indexOf('unspecified') < 0 }*/
    from "${project.projectDir}/build/libs"
    into installDir
}

// zip into build/distributions
task zipInstall(type: Zip, dependsOn: prepareInstall) {
    from installDir.toString()
}

java {
    withSourcesJar()
}

publishing {   // use gradle publish
    def localMavenDir = System.getenv()['LOCAL_MAVEN_DIR']
    if (!localMavenDir) {
        logger.error("LOCAL_MAVEN_DIR is not defined! Artifacts will not be exported!")
    } else {
        publications {
            eetLiteLibrary(MavenPublication) {
                from components.java
                artifact groovydocJar {
                    classifier "groovydoc"
                }
            }
        }
        repositories {
            maven {
                name = 'novakmirepo'
                url = "file://${localMavenDir}/releases"
            }
        }
    }
}
